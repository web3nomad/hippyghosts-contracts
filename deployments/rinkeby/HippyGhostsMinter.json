{
  "address": "0x13671892A85C4756Ee2e29022a05f075385aC0A0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "hippyGhosts_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "verificationAddress_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "mintKey",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "numberOfTokens",
          "type": "uint256"
        }
      ],
      "name": "MintKeyClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EPOCH_BLOCKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GHOSTS_PER_EPOCH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_GHOSTS_PER_MINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_OWNER_MINT_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PRIVATE_MINT_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PUBLIC_MINT_INDEX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableForPublicMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpoch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "epochOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hippyGhosts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "mintKey",
          "type": "address"
        }
      ],
      "name": "isMintKeyClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfTokens",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "numberOfTokens",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "valueInWei",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "mintKey",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "mintWithSignature",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "ownerMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ownerMintCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentEpoch",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenEpoch",
          "type": "uint256"
        }
      ],
      "name": "priceForTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "priceForTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateMintCount",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateMintIndex",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintPriceDecay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintPriceLower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintPriceUpper",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicMintStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "selfDestruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "publicMintStartBlock_",
          "type": "uint256"
        }
      ],
      "name": "setPublicMintStartBlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verificationAddress_",
          "type": "address"
        }
      ],
      "name": "setVerificationAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verificationAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "withdrawTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5bf513bc9e1944e77169ecd1a37f94fd3522651547511fe077e4bdfb2a1c4f2c",
  "receipt": {
    "to": null,
    "from": "0x03793EB77F02B730B1842AFC4f4F66B8305F16a3",
    "contractAddress": "0x13671892A85C4756Ee2e29022a05f075385aC0A0",
    "transactionIndex": 15,
    "gasUsed": "1638730",
    "logsBloom": "0x
    "blockHash": "0x075e0b9834698452e011be973e13c70a26843eac358546c15b6e3bc837ce3594",
    "transactionHash": "0x5bf513bc9e1944e77169ecd1a37f94fd3522651547511fe077e4bdfb2a1c4f2c",
    "logs": [
      {
        "transactionIndex": 15,
        "blockNumber": 10662862,
        "transactionHash": "0x5bf513bc9e1944e77169ecd1a37f94fd3522651547511fe077e4bdfb2a1c4f2c",
        "address": "0x13671892A85C4756Ee2e29022a05f075385aC0A0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000003793eb77f02b730b1842afc4f4f66b8305f16a3"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x075e0b9834698452e011be973e13c70a26843eac358546c15b6e3bc837ce3594"
      }
    ],
    "blockNumber": 10662862,
    "cumulativeGasUsed": "2568143",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xEDbD71e25714e4E96ca305322232cBC53cc89F08",
    "0x976f61940624C8EeA0F7D2E8852F3F7E32d25E26"
  ],
  "numDeployments": 1,
  "solcInputHash": "d92bf60d5b71dcb43525648b303615f6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"hippyGhosts_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"verificationAddress_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintKey\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"MintKeyClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EPOCH_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GHOSTS_PER_EPOCH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_GHOSTS_PER_MINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_OWNER_MINT_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PRIVATE_MINT_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PUBLIC_MINT_INDEX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableForPublicMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"epochOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hippyGhosts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mintKey\",\"type\":\"address\"}],\"name\":\"isMintKeyClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valueInWei\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintKey\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mintWithSignature\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"ownerMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ownerMintCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenEpoch\",\"type\":\"uint256\"}],\"name\":\"priceForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"priceForTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateMintCount\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateMintIndex\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPriceDecay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPriceLower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintPriceUpper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicMintStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selfDestruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"publicMintStartBlock_\",\"type\":\"uint256\"}],\"name\":\"setPublicMintStartBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verificationAddress_\",\"type\":\"address\"}],\"name\":\"setVerificationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verificationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"events\":{\"MintKeyClaimed(address,address,uint256)\":{\"details\":\"provide feedback on mint key used for signed mints\"}},\"kind\":\"dev\",\"methods\":{\"currentEpoch()\":{\"details\":\"Epoch number start from 1, will increase every [EPOCH_BLOCKS] blocks\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"MAX_GHOSTS_PER_MINT\":{\"details\":\"Index and upper bound for mint\"},\"_claimedMintKeys\":{\"details\":\"Key(address) mapping to a claimed key. Used to prevent address from rebroadcasting mint transactions\"},\"publicMintPriceUpper\":{\"details\":\"Ether value for each token in public mint\"},\"publicMintStartBlock\":{\"details\":\"Starting block and inverval for public mint\"},\"verificationAddress\":{\"details\":\"Public address used to sign function calls parameters\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/HippyGhostsMinter.sol\":\"HippyGhostsMinter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"src/HippyGhostsMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n *   _    _ _____ _____  _______     __   _____ _    _  ____   _____ _______ _____\\n *  | |  | |_   _|  __ \\\\|  __ \\\\ \\\\   / /  / ____| |  | |/ __ \\\\ / ____|__   __/ ____|\\n *  | |__| | | | | |__) | |__) \\\\ \\\\_/ /  | |  __| |__| | |  | | (___    | | | (___\\n *  |  __  | | | |  ___/|  ___/ \\\\   /   | | |_ |  __  | |  | |\\\\___ \\\\   | |  \\\\___ \\\\\\n *  | |  | |_| |_| |    | |      | |    | |__| | |  | | |__| |____) |  | |  ____) |\\n *  |_|  |_|_____|_|    |_|      |_|     \\\\_____|_|  |_|\\\\____/|_____/   |_| |_____/\\n *\\n * Total 9999 Hippy Ghosts\\n * ----------------------------------------------------------------------------\\n * 1 |  180 | [   1, 180] | kept for team\\n * 2 | 1320 | [ 181,1500] | private mint, 320 for team, 1000 for community\\n * 3 | 8499 | [1501,9999] | public mint, release 300 ghosts every 40000 blocks\\n * ----------------------------------------------------------------------------\\n */\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./libraries/SignatureVerification.sol\\\";\\n\\ncontract HippyGhostsMinter is Ownable {\\n\\n    /****************************************\\n     * Variables\\n     ****************************************/\\n\\n    address public immutable hippyGhosts;\\n\\n    /**\\n     * @dev Ether value for each token in public mint\\n     */\\n    uint256 public constant publicMintPriceUpper = 0.24 ether;\\n    uint256 public constant publicMintPriceLower = 0.08 ether;\\n    uint256 public constant publicMintPriceDecay = 0.04 ether;\\n\\n    /**\\n     * @dev Starting block and inverval for public mint\\n     */\\n    uint256 public publicMintStartBlock = 0;\\n    uint256 public constant EPOCH_BLOCKS = 40000;\\n    uint256 public constant GHOSTS_PER_EPOCH = 300;\\n\\n    /**\\n     * @dev Index and upper bound for mint\\n     */\\n    // general\\n    uint256 public constant MAX_GHOSTS_PER_MINT = 10;\\n    // team\\n    uint256 public ownerMintCount = 0;\\n    uint256 public constant MAX_OWNER_MINT_COUNT = 300;\\n    // private\\n    uint128 public privateMintCount = 0;\\n    uint128 public privateMintIndex = 180;\\n    uint256 public constant MAX_PRIVATE_MINT_INDEX = 1500;\\n    // public\\n    uint256 public publicMintIndex = 1500;\\n    uint256 public constant MAX_PUBLIC_MINT_INDEX = 9999;\\n\\n    /**\\n     * @dev Public address used to sign function calls parameters\\n     */\\n    address public verificationAddress;\\n\\n    /**\\n     * @dev Key(address) mapping to a claimed key.\\n     * Used to prevent address from rebroadcasting mint transactions\\n     */\\n    mapping(address => bool) private _claimedMintKeys;\\n\\n    /****************************************\\n     * Events\\n     ****************************************/\\n\\n    /**\\n     * @dev provide feedback on mint key used for signed mints\\n     */\\n    event MintKeyClaimed(\\n        address indexed claimer,\\n        address indexed mintKey,\\n        uint256 numberOfTokens\\n    );\\n\\n\\n    /****************************************\\n     * Functions\\n     ****************************************/\\n\\n    constructor(\\n        address hippyGhosts_,\\n        address verificationAddress_\\n    ) {\\n        hippyGhosts = hippyGhosts_;\\n        verificationAddress = verificationAddress_;\\n    }\\n\\n    receive() external payable {}\\n\\n    /* config functions */\\n\\n    function setPublicMintStartBlock(uint256 publicMintStartBlock_) external onlyOwner {\\n        require(publicMintStartBlock == 0, \\\"publicMintStartBlock has already been set\\\");\\n        publicMintStartBlock = publicMintStartBlock_;\\n    }\\n\\n    function setVerificationAddress(address verificationAddress_) external onlyOwner {\\n        verificationAddress = verificationAddress_;\\n    }\\n\\n    function isMintKeyClaimed(address mintKey) external view returns (bool) {\\n        return _claimedMintKeys[mintKey];\\n    }\\n\\n    /* private mint functions */\\n\\n    function ownerMint(\\n        address[] calldata addresses,\\n        uint256[] calldata tokenIds\\n    ) external onlyOwner {\\n        ownerMintCount = ownerMintCount + tokenIds.length;\\n        require(ownerMintCount <= MAX_OWNER_MINT_COUNT, \\\"Not enough ghosts remaining to mint\\\");\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            require(tokenIds[i] <= MAX_PRIVATE_MINT_INDEX, \\\"Incorrect tokenId to mint\\\");\\n            IHippyGhosts(hippyGhosts).mint(addresses[i], tokenIds[i]);\\n        }\\n    }\\n\\n    function mintWithSignature(\\n        uint256 numberOfTokens,\\n        uint256 valueInWei,\\n        address mintKey,\\n        bytes memory signature\\n    ) external payable {\\n        require(valueInWei == msg.value, \\\"Incorrect ether value sent\\\");\\n        require(_claimedMintKeys[mintKey] == false, \\\"Mint key already claimed\\\");\\n\\n        SignatureVerification.requireValidSignature(\\n            abi.encodePacked(msg.sender, numberOfTokens, valueInWei, mintKey, this),\\n            signature,\\n            verificationAddress\\n        );\\n\\n        _claimedMintKeys[mintKey] = true;\\n        emit MintKeyClaimed(msg.sender, mintKey, numberOfTokens);\\n\\n        uint128 currentMintIndex = privateMintIndex;\\n        for (uint256 i = 0; i < numberOfTokens; i++) {\\n            bool success = false;\\n            bytes memory result;\\n            while (!success) {\\n                // count to next index before minting\\n                currentMintIndex = currentMintIndex + 1;\\n                require(currentMintIndex <= MAX_PRIVATE_MINT_INDEX, \\\"Incorrect tokenId to mint\\\");\\n                (success, result) = hippyGhosts.call(\\n                    abi.encodeWithSignature(\\\"mint(address,uint256)\\\", msg.sender, currentMintIndex)\\n                );\\n                // Mint will fail ONLY when tokenId is taken\\n            }\\n        }\\n        privateMintCount = privateMintCount + uint128(numberOfTokens);\\n        privateMintIndex = currentMintIndex;\\n    }\\n\\n    /* public mint functions */\\n\\n    /**\\n     *  @dev Epoch number start from 1, will increase every [EPOCH_BLOCKS] blocks\\n     */\\n    function currentEpoch() public view returns (uint256) {\\n        if (publicMintStartBlock == 0 || block.number < publicMintStartBlock) {\\n            return 0;\\n        }\\n        uint256 epoches = (block.number - publicMintStartBlock) / EPOCH_BLOCKS;\\n        return epoches + 1;\\n    }\\n\\n    function epochOfToken(uint256 tokenId) public pure returns (uint256) {\\n        require(tokenId > MAX_PRIVATE_MINT_INDEX, \\\"Invalid tokenId\\\");\\n        uint256 epoches = (tokenId - MAX_PRIVATE_MINT_INDEX - 1) / GHOSTS_PER_EPOCH;\\n        // assert(epoches >= 0);  // not necessary\\n        return epoches + 1;\\n    }\\n\\n    function availableForPublicMint() public view returns (uint256) {\\n        uint256 released = GHOSTS_PER_EPOCH * currentEpoch();\\n        if (released > MAX_PUBLIC_MINT_INDEX - MAX_PRIVATE_MINT_INDEX) {\\n            released = MAX_PUBLIC_MINT_INDEX - MAX_PRIVATE_MINT_INDEX;\\n        }\\n        uint256 ghostsMintedInPublic = publicMintIndex - MAX_PRIVATE_MINT_INDEX;\\n        return released - ghostsMintedInPublic;\\n    }\\n\\n    function priceForTokenId(uint256 tokenId) public view returns (uint256) {\\n        return priceForTokenId(currentEpoch(), epochOfToken(tokenId));\\n    }\\n\\n    function priceForTokenId(uint256 _currentEpoch, uint256 _tokenEpoch) public pure returns (uint256) {\\n        require(_currentEpoch >= _tokenEpoch, \\\"Target epoch is not open\\\");\\n        uint256 price = publicMintPriceUpper - (_currentEpoch - _tokenEpoch) * publicMintPriceDecay;\\n        if (price < publicMintPriceLower) {\\n            price = publicMintPriceLower;\\n        }\\n        return price;\\n    }\\n\\n    function mint(uint256 numberOfTokens) external payable {\\n        uint256 _currentEpoch = currentEpoch();\\n        require(_currentEpoch > 0, \\\"Public sale is not open\\\");\\n        require(numberOfTokens <= MAX_GHOSTS_PER_MINT, \\\"Max ghosts to mint is ten\\\");\\n        require(publicMintIndex + numberOfTokens <= MAX_PUBLIC_MINT_INDEX, \\\"Not enough ghosts remaining to mint\\\");\\n        uint256 _etherValue = msg.value;\\n        for (uint256 i = 0; i < numberOfTokens; i++) {\\n            publicMintIndex = publicMintIndex + 1;\\n            uint256 _tokenEpoch = epochOfToken(publicMintIndex);\\n            uint256 price = priceForTokenId(_currentEpoch, _tokenEpoch);\\n            // require(_etherValue >= price, \\\"Ether value not enough\\\");  // not necessary, `uint` will raise error\\n            _etherValue = _etherValue - price;\\n            IHippyGhosts(hippyGhosts).mint(msg.sender, publicMintIndex);\\n        }\\n        if (_etherValue > 0) {\\n            payable(msg.sender).transfer(_etherValue);\\n        }\\n    }\\n\\n    /* withdraw from contract */\\n\\n    function withdraw() external onlyOwner {\\n        uint256 balance = address(this).balance;\\n        payable(msg.sender).transfer(balance);\\n    }\\n\\n    function withdrawTokens(IERC20 token) external onlyOwner {\\n        uint256 balance = token.balanceOf(address(this));\\n        token.transfer(msg.sender, balance);\\n    }\\n\\n    function selfDestruct() external onlyOwner {\\n        selfdestruct(payable(msg.sender));\\n    }\\n}\\n\\ninterface IHippyGhosts {\\n    function mint(address to, uint256 tokenId) external;\\n}\\n\",\"keccak256\":\"0xcf51bf59f8a07569a89268ba7df2c15b0888c6eccc230bcecfd75c3aeae948fe\",\"license\":\"MIT\"},\"src/libraries/SignatureVerification.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nlibrary SignatureVerification {\\n    using ECDSA for bytes32;\\n\\n    // https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/ECDSA.sol\\n    // https://docs.soliditylang.org/en/v0.8.4/solidity-by-example.html?highlight=ecrecover#the-full-contract\\n\\n    /**\\n     * @dev Performs address recovery on data and signature. Compares recovred address to varification address.\\n     * @param data Packed data used for signature generation\\n     * @param signature Signature for the provided data\\n     * @param verificationAddress Address to compare to recovered address\\n     */\\n    function requireValidSignature(\\n        bytes memory data,\\n        bytes memory signature,\\n        address verificationAddress\\n    ) internal pure {\\n        require(\\n            verificationAddress != address(0),\\n            \\\"verification address not initialized\\\"\\n        );\\n\\n        require(\\n            keccak256(data).toEthSignedMessageHash().recover(signature) ==\\n                verificationAddress,\\n            \\\"signature invalid\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x4dc42d4f7f191072caa6598846945ba001dd7db05bb2b5427a248d84519cc845\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260006001819055600255602d60821b6003556105dc6004553480156200002957600080fd5b5060405162001c4038038062001c408339810160408190526200004c91620000ed565b620000573362000080565b6001600160a01b03918216608052600580546001600160a01b0319169190921617905562000125565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620000e857600080fd5b919050565b600080604083850312156200010157600080fd5b6200010c83620000d0565b91506200011c60208401620000d0565b90509250929050565b608051611aea62000156600039600081816105340152818161097101528181610c720152610f4b0152611aea6000f3fe6080604052600436106101f25760003560e01c80638dda4c901161010d578063ae3c87be116100a0578063cfd15bbd1161006f578063cfd15bbd146104e0578063e9d899c614610556578063f2fde38b14610576578063fc873cd514610596578063fce531df146105b657600080fd5b8063ae3c87be146104e0578063af2a541d146104f6578063afad7c6a1461050c578063b75ffd561461052257600080fd5b8063a0712d68116100dc578063a0712d6814610455578063a13bfd6514610468578063a3e04e401461047b578063ab5d5ea21461049757600080fd5b80638dda4c90146103ef578063934dc7491461040a5780639bb4fc451461042a5780639cb8a26a1461044057600080fd5b806369f7d2f211610185578063766718081161015457806376671808146103455780638429c9661461035a578063871ee495146103995780638da5cb5b146103d157600080fd5b806369f7d2f2146102e5578063715018a61461030557806373f73a6e1461031a57806374c259c61461032f57600080fd5b8063417ffa83116101c1578063417ffa831461027357806349df728c146102935780634dc64fb6146102b3578063637b2d6c146102cf57600080fd5b806306959429146101fe57806307c7903b14610220578063137edaa0146102485780633ccfd60b1461025e57600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b5061021e6102193660046116d8565b6105d6565b005b34801561022c57600080fd5b5061023561062b565b6040519081526020015b60405180910390f35b34801561025457600080fd5b5061023560025481565b34801561026a57600080fd5b5061021e61068f565b34801561027f57600080fd5b5061023561028e3660046116f5565b6106ec565b34801561029f57600080fd5b5061021e6102ae3660046116d8565b610792565b3480156102bf57600080fd5b5061023567011c37937e08000081565b3480156102db57600080fd5b506102356105dc81565b3480156102f157600080fd5b5061021e61030036600461175c565b6108a0565b34801561031157600080fd5b5061021e610a58565b34801561032657600080fd5b50610235600a81565b34801561033b57600080fd5b50610235619c4081565b34801561035157600080fd5b50610235610a8e565b34801561036657600080fd5b5060035461038190600160801b90046001600160801b031681565b6040516001600160801b03909116815260200161023f565b3480156103a557600080fd5b506005546103b9906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b3480156103dd57600080fd5b506000546001600160a01b03166103b9565b3480156103fb57600080fd5b50610235668e1bc9bf04000081565b34801561041657600080fd5b506102356104253660046117c8565b610add565b34801561043657600080fd5b5061023560015481565b34801561044c57600080fd5b5061021e610af9565b61021e6104633660046117c8565b610b26565b61021e6104763660046117f7565b610d1d565b34801561048757600080fd5b50610235670354a6ba7a18000081565b3480156104a357600080fd5b506104d06104b23660046116d8565b6001600160a01b031660009081526006602052604090205460ff1690565b604051901515815260200161023f565b3480156104ec57600080fd5b5061023561012c81565b34801561050257600080fd5b5061023560045481565b34801561051857600080fd5b5061023561270f81565b34801561052e57600080fd5b506103b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561056257600080fd5b506102356105713660046117c8565b61103b565b34801561058257600080fd5b5061021e6105913660046116d8565b6110b4565b3480156105a257600080fd5b50600354610381906001600160801b031681565b3480156105c257600080fd5b5061021e6105d13660046117c8565b61114f565b6000546001600160a01b031633146106095760405162461bcd60e51b8152600401610600906118ce565b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080610636610a8e565b6106429061012c611919565b90506106526105dc61270f611938565b81111561066a576106676105dc61270f611938565b90505b60006105dc60045461067c9190611938565b90506106888183611938565b9250505090565b6000546001600160a01b031633146106b95760405162461bcd60e51b8152600401610600906118ce565b6040514790339082156108fc029083906000818181858888f193505050501580156106e8573d6000803e3d6000fd5b5050565b60008183101561073e5760405162461bcd60e51b815260206004820152601860248201527f5461726765742065706f6368206973206e6f74206f70656e00000000000000006044820152606401610600565b6000668e1bc9bf0400006107528486611938565b61075c9190611919565b61076e90670354a6ba7a180000611938565b905067011c37937e08000081101561078b575067011c37937e0800005b9392505050565b6000546001600160a01b031633146107bc5760405162461bcd60e51b8152600401610600906118ce565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610803573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610827919061194f565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b9190611968565b505050565b6000546001600160a01b031633146108ca5760405162461bcd60e51b8152600401610600906118ce565b6002546108d890829061198a565b600281905561012c10156108fe5760405162461bcd60e51b8152600401610600906119a2565b60005b81811015610a51576105dc83838381811061091e5761091e6119e5565b90506020020135111561096f5760405162461bcd60e51b8152602060048201526019602482015278125b98dbdc9c9958dd081d1bdad95b9259081d1bc81b5a5b9d603a1b6044820152606401610600565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f198686848181106109b0576109b06119e5565b90506020020160208101906109c591906116d8565b8585858181106109d7576109d76119e5565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401600060405180830381600087803b158015610a2657600080fd5b505af1158015610a3a573d6000803e3d6000fd5b505050508080610a49906119fb565b915050610901565b5050505050565b6000546001600160a01b03163314610a825760405162461bcd60e51b8152600401610600906118ce565b610a8c60006111e0565b565b600060015460001480610aa2575060015443105b15610aad5750600090565b6000619c4060015443610ac09190611938565b610aca9190611a16565b9050610ad781600161198a565b91505090565b6000610af3610aea610a8e565b61028e8461103b565b92915050565b6000546001600160a01b03163314610b235760405162461bcd60e51b8152600401610600906118ce565b33ff5b6000610b30610a8e565b905060008111610b825760405162461bcd60e51b815260206004820152601760248201527f5075626c69632073616c65206973206e6f74206f70656e0000000000000000006044820152606401610600565b600a821115610bd35760405162461bcd60e51b815260206004820152601960248201527f4d61782067686f73747320746f206d696e742069732074656e000000000000006044820152606401610600565b61270f82600454610be4919061198a565b1115610c025760405162461bcd60e51b8152600401610600906119a2565b3460005b83811015610ce357600454610c1c90600161198a565b6004819055600090610c2d9061103b565b90506000610c3b85836106ec565b9050610c478185611938565b600480546040516340c10f1960e01b8152339281019290925260248201529094506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b158015610cb657600080fd5b505af1158015610cca573d6000803e3d6000fd5b5050505050508080610cdb906119fb565b915050610c06565b50801561089b57604051339082156108fc029083906000818181858888f19350505050158015610d17573d6000803e3d6000fd5b50505050565b348314610d6c5760405162461bcd60e51b815260206004820152601a60248201527f496e636f72726563742065746865722076616c75652073656e740000000000006044820152606401610600565b6001600160a01b03821660009081526006602052604090205460ff1615610dd55760405162461bcd60e51b815260206004820152601860248201527f4d696e74206b657920616c726561647920636c61696d656400000000000000006044820152606401610600565b6040516bffffffffffffffffffffffff1933606090811b82166020840152603483018790526054830186905284811b8216607484015230901b166088820152610e3e90609c0160408051601f1981840301815291905260055483906001600160a01b0316611230565b6001600160a01b03821660008181526006602052604090819020805460ff191660011790555133907f7199211527ef146af6ac7c4a9d44fb290d7a4e6a2c164effe334f1944bd551f490610e959088815260200190565b60405180910390a3600354600160801b90046001600160801b031660005b8581101561100657600060605b81610ff157610ed0846001611a38565b93506105dc846001600160801b03161115610f295760405162461bcd60e51b8152602060048201526019602482015278125b98dbdc9c9958dd081d1bdad95b9259081d1bc81b5a5b9d603a1b6044820152606401610600565b6040513360248201526001600160801b03851660448201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169060640160408051601f198184030181529181526020820180516001600160e01b03166340c10f1960e01b17905251610fa49190611a63565b6000604051808303816000865af19150503d8060008114610fe1576040519150601f19603f3d011682016040523d82523d6000602084013e610fe6565b606091505b509092509050610ec0565b50508080610ffe906119fb565b915050610eb3565b5060035461101e9086906001600160801b0316611a38565b6001600160801b03918216600160801b0291161760035550505050565b60006105dc82116110805760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610600565b600061012c60016110936105dc86611938565b61109d9190611938565b6110a79190611a16565b905061078b81600161198a565b6000546001600160a01b031633146110de5760405162461bcd60e51b8152600401610600906118ce565b6001600160a01b0381166111435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610600565b61114c816111e0565b50565b6000546001600160a01b031633146111795760405162461bcd60e51b8152600401610600906118ce565b600154156111db5760405162461bcd60e51b815260206004820152602960248201527f7075626c69634d696e745374617274426c6f636b2068617320616c7265616479604482015268081899595b881cd95d60ba1b6064820152608401610600565b600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166112925760405162461bcd60e51b8152602060048201526024808201527f766572696669636174696f6e2061646472657373206e6f7420696e697469616c6044820152631a5e995960e21b6064820152608401610600565b806001600160a01b0316611304836112fe86805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9061134e565b6001600160a01b03161461089b5760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c99481a5b9d985b1a59607a1b6044820152606401610600565b600080600061135d8585611372565b9150915061136a816113e2565b509392505050565b6000808251604114156113a95760208301516040840151606085015160001a61139d8782858561159d565b945094505050506113db565b8251604014156113d357602083015160408401516113c886838361168a565b9350935050506113db565b506000905060025b9250929050565b60008160048111156113f6576113f6611a9e565b14156113ff5750565b600181600481111561141357611413611a9e565b14156114615760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610600565b600281600481111561147557611475611a9e565b14156114c35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610600565b60038160048111156114d7576114d7611a9e565b14156115305760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610600565b600481600481111561154457611544611a9e565b141561114c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610600565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115d45750600090506003611681565b8460ff16601b141580156115ec57508460ff16601c14155b156115fd5750600090506004611681565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611651573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661167a57600060019250925050611681565b9150600090505b94509492505050565b6000806001600160ff1b038316816116a760ff86901c601b61198a565b90506116b58782888561159d565b935093505050935093915050565b6001600160a01b038116811461114c57600080fd5b6000602082840312156116ea57600080fd5b813561078b816116c3565b6000806040838503121561170857600080fd5b50508035926020909101359150565b60008083601f84011261172957600080fd5b50813567ffffffffffffffff81111561174157600080fd5b6020830191508360208260051b85010111156113db57600080fd5b6000806000806040858703121561177257600080fd5b843567ffffffffffffffff8082111561178a57600080fd5b61179688838901611717565b909650945060208701359150808211156117af57600080fd5b506117bc87828801611717565b95989497509550505050565b6000602082840312156117da57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561180d57600080fd5b84359350602085013592506040850135611826816116c3565b9150606085013567ffffffffffffffff8082111561184357600080fd5b818701915087601f83011261185757600080fd5b813581811115611869576118696117e1565b604051601f8201601f19908116603f01168101908382118183101715611891576118916117e1565b816040528281528a60208487010111156118aa57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561193357611933611903565b500290565b60008282101561194a5761194a611903565b500390565b60006020828403121561196157600080fd5b5051919050565b60006020828403121561197a57600080fd5b8151801515811461078b57600080fd5b6000821982111561199d5761199d611903565b500190565b60208082526023908201527f4e6f7420656e6f7567682067686f7374732072656d61696e696e6720746f206d6040820152621a5b9d60ea1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611a0f57611a0f611903565b5060010190565b600082611a3357634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160801b03808316818516808303821115611a5a57611a5a611903565b01949350505050565b6000825160005b81811015611a845760208186018101518583015201611a6a565b81811115611a93576000828501525b509190910192915050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212206484ba52f25dcb018a6d87b7e2b96b4d5d26bcc8348807ceb2bffca109f2095664736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101f25760003560e01c80638dda4c901161010d578063ae3c87be116100a0578063cfd15bbd1161006f578063cfd15bbd146104e0578063e9d899c614610556578063f2fde38b14610576578063fc873cd514610596578063fce531df146105b657600080fd5b8063ae3c87be146104e0578063af2a541d146104f6578063afad7c6a1461050c578063b75ffd561461052257600080fd5b8063a0712d68116100dc578063a0712d6814610455578063a13bfd6514610468578063a3e04e401461047b578063ab5d5ea21461049757600080fd5b80638dda4c90146103ef578063934dc7491461040a5780639bb4fc451461042a5780639cb8a26a1461044057600080fd5b806369f7d2f211610185578063766718081161015457806376671808146103455780638429c9661461035a578063871ee495146103995780638da5cb5b146103d157600080fd5b806369f7d2f2146102e5578063715018a61461030557806373f73a6e1461031a57806374c259c61461032f57600080fd5b8063417ffa83116101c1578063417ffa831461027357806349df728c146102935780634dc64fb6146102b3578063637b2d6c146102cf57600080fd5b806306959429146101fe57806307c7903b14610220578063137edaa0146102485780633ccfd60b1461025e57600080fd5b366101f957005b600080fd5b34801561020a57600080fd5b5061021e6102193660046116d8565b6105d6565b005b34801561022c57600080fd5b5061023561062b565b6040519081526020015b60405180910390f35b34801561025457600080fd5b5061023560025481565b34801561026a57600080fd5b5061021e61068f565b34801561027f57600080fd5b5061023561028e3660046116f5565b6106ec565b34801561029f57600080fd5b5061021e6102ae3660046116d8565b610792565b3480156102bf57600080fd5b5061023567011c37937e08000081565b3480156102db57600080fd5b506102356105dc81565b3480156102f157600080fd5b5061021e61030036600461175c565b6108a0565b34801561031157600080fd5b5061021e610a58565b34801561032657600080fd5b50610235600a81565b34801561033b57600080fd5b50610235619c4081565b34801561035157600080fd5b50610235610a8e565b34801561036657600080fd5b5060035461038190600160801b90046001600160801b031681565b6040516001600160801b03909116815260200161023f565b3480156103a557600080fd5b506005546103b9906001600160a01b031681565b6040516001600160a01b03909116815260200161023f565b3480156103dd57600080fd5b506000546001600160a01b03166103b9565b3480156103fb57600080fd5b50610235668e1bc9bf04000081565b34801561041657600080fd5b506102356104253660046117c8565b610add565b34801561043657600080fd5b5061023560015481565b34801561044c57600080fd5b5061021e610af9565b61021e6104633660046117c8565b610b26565b61021e6104763660046117f7565b610d1d565b34801561048757600080fd5b50610235670354a6ba7a18000081565b3480156104a357600080fd5b506104d06104b23660046116d8565b6001600160a01b031660009081526006602052604090205460ff1690565b604051901515815260200161023f565b3480156104ec57600080fd5b5061023561012c81565b34801561050257600080fd5b5061023560045481565b34801561051857600080fd5b5061023561270f81565b34801561052e57600080fd5b506103b97f000000000000000000000000000000000000000000000000000000000000000081565b34801561056257600080fd5b506102356105713660046117c8565b61103b565b34801561058257600080fd5b5061021e6105913660046116d8565b6110b4565b3480156105a257600080fd5b50600354610381906001600160801b031681565b3480156105c257600080fd5b5061021e6105d13660046117c8565b61114f565b6000546001600160a01b031633146106095760405162461bcd60e51b8152600401610600906118ce565b60405180910390fd5b600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080610636610a8e565b6106429061012c611919565b90506106526105dc61270f611938565b81111561066a576106676105dc61270f611938565b90505b60006105dc60045461067c9190611938565b90506106888183611938565b9250505090565b6000546001600160a01b031633146106b95760405162461bcd60e51b8152600401610600906118ce565b6040514790339082156108fc029083906000818181858888f193505050501580156106e8573d6000803e3d6000fd5b5050565b60008183101561073e5760405162461bcd60e51b815260206004820152601860248201527f5461726765742065706f6368206973206e6f74206f70656e00000000000000006044820152606401610600565b6000668e1bc9bf0400006107528486611938565b61075c9190611919565b61076e90670354a6ba7a180000611938565b905067011c37937e08000081101561078b575067011c37937e0800005b9392505050565b6000546001600160a01b031633146107bc5760405162461bcd60e51b8152600401610600906118ce565b6040516370a0823160e01b81523060048201526000906001600160a01b038316906370a0823190602401602060405180830381865afa158015610803573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610827919061194f565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0383169063a9059cbb906044016020604051808303816000875af1158015610877573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089b9190611968565b505050565b6000546001600160a01b031633146108ca5760405162461bcd60e51b8152600401610600906118ce565b6002546108d890829061198a565b600281905561012c10156108fe5760405162461bcd60e51b8152600401610600906119a2565b60005b81811015610a51576105dc83838381811061091e5761091e6119e5565b90506020020135111561096f5760405162461bcd60e51b8152602060048201526019602482015278125b98dbdc9c9958dd081d1bdad95b9259081d1bc81b5a5b9d603a1b6044820152606401610600565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166340c10f198686848181106109b0576109b06119e5565b90506020020160208101906109c591906116d8565b8585858181106109d7576109d76119e5565b6040516001600160e01b031960e087901b1681526001600160a01b0390941660048501526020029190910135602483015250604401600060405180830381600087803b158015610a2657600080fd5b505af1158015610a3a573d6000803e3d6000fd5b505050508080610a49906119fb565b915050610901565b5050505050565b6000546001600160a01b03163314610a825760405162461bcd60e51b8152600401610600906118ce565b610a8c60006111e0565b565b600060015460001480610aa2575060015443105b15610aad5750600090565b6000619c4060015443610ac09190611938565b610aca9190611a16565b9050610ad781600161198a565b91505090565b6000610af3610aea610a8e565b61028e8461103b565b92915050565b6000546001600160a01b03163314610b235760405162461bcd60e51b8152600401610600906118ce565b33ff5b6000610b30610a8e565b905060008111610b825760405162461bcd60e51b815260206004820152601760248201527f5075626c69632073616c65206973206e6f74206f70656e0000000000000000006044820152606401610600565b600a821115610bd35760405162461bcd60e51b815260206004820152601960248201527f4d61782067686f73747320746f206d696e742069732074656e000000000000006044820152606401610600565b61270f82600454610be4919061198a565b1115610c025760405162461bcd60e51b8152600401610600906119a2565b3460005b83811015610ce357600454610c1c90600161198a565b6004819055600090610c2d9061103b565b90506000610c3b85836106ec565b9050610c478185611938565b600480546040516340c10f1960e01b8152339281019290925260248201529094506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b158015610cb657600080fd5b505af1158015610cca573d6000803e3d6000fd5b5050505050508080610cdb906119fb565b915050610c06565b50801561089b57604051339082156108fc029083906000818181858888f19350505050158015610d17573d6000803e3d6000fd5b50505050565b348314610d6c5760405162461bcd60e51b815260206004820152601a60248201527f496e636f72726563742065746865722076616c75652073656e740000000000006044820152606401610600565b6001600160a01b03821660009081526006602052604090205460ff1615610dd55760405162461bcd60e51b815260206004820152601860248201527f4d696e74206b657920616c726561647920636c61696d656400000000000000006044820152606401610600565b6040516bffffffffffffffffffffffff1933606090811b82166020840152603483018790526054830186905284811b8216607484015230901b166088820152610e3e90609c0160408051601f1981840301815291905260055483906001600160a01b0316611230565b6001600160a01b03821660008181526006602052604090819020805460ff191660011790555133907f7199211527ef146af6ac7c4a9d44fb290d7a4e6a2c164effe334f1944bd551f490610e959088815260200190565b60405180910390a3600354600160801b90046001600160801b031660005b8581101561100657600060605b81610ff157610ed0846001611a38565b93506105dc846001600160801b03161115610f295760405162461bcd60e51b8152602060048201526019602482015278125b98dbdc9c9958dd081d1bdad95b9259081d1bc81b5a5b9d603a1b6044820152606401610600565b6040513360248201526001600160801b03851660448201526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169060640160408051601f198184030181529181526020820180516001600160e01b03166340c10f1960e01b17905251610fa49190611a63565b6000604051808303816000865af19150503d8060008114610fe1576040519150601f19603f3d011682016040523d82523d6000602084013e610fe6565b606091505b509092509050610ec0565b50508080610ffe906119fb565b915050610eb3565b5060035461101e9086906001600160801b0316611a38565b6001600160801b03918216600160801b0291161760035550505050565b60006105dc82116110805760405162461bcd60e51b815260206004820152600f60248201526e125b9d985b1a59081d1bdad95b9259608a1b6044820152606401610600565b600061012c60016110936105dc86611938565b61109d9190611938565b6110a79190611a16565b905061078b81600161198a565b6000546001600160a01b031633146110de5760405162461bcd60e51b8152600401610600906118ce565b6001600160a01b0381166111435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610600565b61114c816111e0565b50565b6000546001600160a01b031633146111795760405162461bcd60e51b8152600401610600906118ce565b600154156111db5760405162461bcd60e51b815260206004820152602960248201527f7075626c69634d696e745374617274426c6f636b2068617320616c7265616479604482015268081899595b881cd95d60ba1b6064820152608401610600565b600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381166112925760405162461bcd60e51b8152602060048201526024808201527f766572696669636174696f6e2061646472657373206e6f7420696e697469616c6044820152631a5e995960e21b6064820152608401610600565b806001600160a01b0316611304836112fe86805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9061134e565b6001600160a01b03161461089b5760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c99481a5b9d985b1a59607a1b6044820152606401610600565b600080600061135d8585611372565b9150915061136a816113e2565b509392505050565b6000808251604114156113a95760208301516040840151606085015160001a61139d8782858561159d565b945094505050506113db565b8251604014156113d357602083015160408401516113c886838361168a565b9350935050506113db565b506000905060025b9250929050565b60008160048111156113f6576113f6611a9e565b14156113ff5750565b600181600481111561141357611413611a9e565b14156114615760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610600565b600281600481111561147557611475611a9e565b14156114c35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610600565b60038160048111156114d7576114d7611a9e565b14156115305760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610600565b600481600481111561154457611544611a9e565b141561114c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610600565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156115d45750600090506003611681565b8460ff16601b141580156115ec57508460ff16601c14155b156115fd5750600090506004611681565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611651573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661167a57600060019250925050611681565b9150600090505b94509492505050565b6000806001600160ff1b038316816116a760ff86901c601b61198a565b90506116b58782888561159d565b935093505050935093915050565b6001600160a01b038116811461114c57600080fd5b6000602082840312156116ea57600080fd5b813561078b816116c3565b6000806040838503121561170857600080fd5b50508035926020909101359150565b60008083601f84011261172957600080fd5b50813567ffffffffffffffff81111561174157600080fd5b6020830191508360208260051b85010111156113db57600080fd5b6000806000806040858703121561177257600080fd5b843567ffffffffffffffff8082111561178a57600080fd5b61179688838901611717565b909650945060208701359150808211156117af57600080fd5b506117bc87828801611717565b95989497509550505050565b6000602082840312156117da57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561180d57600080fd5b84359350602085013592506040850135611826816116c3565b9150606085013567ffffffffffffffff8082111561184357600080fd5b818701915087601f83011261185757600080fd5b813581811115611869576118696117e1565b604051601f8201601f19908116603f01168101908382118183101715611891576118916117e1565b816040528281528a60208487010111156118aa57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561193357611933611903565b500290565b60008282101561194a5761194a611903565b500390565b60006020828403121561196157600080fd5b5051919050565b60006020828403121561197a57600080fd5b8151801515811461078b57600080fd5b6000821982111561199d5761199d611903565b500190565b60208082526023908201527f4e6f7420656e6f7567682067686f7374732072656d61696e696e6720746f206d6040820152621a5b9d60ea1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415611a0f57611a0f611903565b5060010190565b600082611a3357634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160801b03808316818516808303821115611a5a57611a5a611903565b01949350505050565b6000825160005b81811015611a845760208186018101518583015201611a6a565b81811115611a93576000828501525b509190910192915050565b634e487b7160e01b600052602160045260246000fdfea26469706673582212206484ba52f25dcb018a6d87b7e2b96b4d5d26bcc8348807ceb2bffca109f2095664736f6c634300080b0033",
  "devdoc": {
    "events": {
      "MintKeyClaimed(address,address,uint256)": {
        "details": "provide feedback on mint key used for signed mints"
      }
    },
    "kind": "dev",
    "methods": {
      "currentEpoch()": {
        "details": "Epoch number start from 1, will increase every [EPOCH_BLOCKS] blocks"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "MAX_GHOSTS_PER_MINT": {
        "details": "Index and upper bound for mint"
      },
      "_claimedMintKeys": {
        "details": "Key(address) mapping to a claimed key. Used to prevent address from rebroadcasting mint transactions"
      },
      "publicMintPriceUpper": {
        "details": "Ether value for each token in public mint"
      },
      "publicMintStartBlock": {
        "details": "Starting block and inverval for public mint"
      },
      "verificationAddress": {
        "details": "Public address used to sign function calls parameters"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/HippyGhostsMinter.sol:HippyGhostsMinter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1680,
        "contract": "src/HippyGhostsMinter.sol:HippyGhostsMinter",
        "label": "publicMintStartBlock",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1693,
        "contract": "src/HippyGhostsMinter.sol:HippyGhostsMinter",
        "label": "ownerMintCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1699,
        "contract": "src/HippyGhostsMinter.sol:HippyGhostsMinter",
        "label": "privateMintCount",
        "offset": 0,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 1702,
        "contract": "src/HippyGhostsMinter.sol:HippyGhostsMinter",
        "label": "privateMintIndex",
        "offset": 16,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 1708,
        "contract": "src/HippyGhostsMinter.sol:HippyGhostsMinter",
        "label": "publicMintIndex",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1714,
        "contract": "src/HippyGhostsMinter.sol:HippyGhostsMinter",
        "label": "verificationAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1719,
        "contract": "src/HippyGhostsMinter.sol:HippyGhostsMinter",
        "label": "_claimedMintKeys",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}